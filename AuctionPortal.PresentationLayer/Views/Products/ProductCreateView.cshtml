@model AuctionPortal.PresentationLayer.Models.CreateProductModel
@{
    ViewBag.Title = "New Product";
}

<h2>New product</h2>

@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()
    if (!Request.IsAuthenticated)
    {
        Response.Redirect("~/User/NotLoggedIn");
    }

<div class="form-horizontal">
    <hr />
    @Html.ValidationSummary(true, "", new { @class = "text-danger" })
    <div class="form-group">
        @Html.LabelFor(model => model.Product.Name, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.Product.Name, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.Product.Name, "", new { @class = "text-danger" })
        </div>
    </div>
    <div class="form-group">
        @Html.LabelFor(model => model.Product.MinimalBid, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.Product.MinimalBid, new { htmlAttributes = new { @class = "form-control" } })
        </div>
    </div>
    <div class="form-group">
        @Html.LabelFor(model => model.Product.StartPrice, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.Product.StartPrice, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.Product.StartPrice, "", new { @class = "text-danger" })
        </div>
    </div>
    <div class="form-group">
        @Html.LabelFor(model => model.Product.Info, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.Product.Info, new { htmlAttributes = new { @class = "form-control" } })
        </div>
    </div>
    <div class="form-group">
        @Html.LabelFor(model => model.Product.ValidTo, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.Product.ValidTo, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.Product.ValidTo, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="tree panel-body">
        @for (var i = 0; i < Model.Categories.Count; i++)
        {
            if (Model.Categories[i].HasParent)
            {
                continue;
            }
            <ul>
                <li>
                    <a href="#">
                        @Html.CheckBoxFor(model => model.Categories[i].IsActive, new { @class = "tree-checkbox parent", @id = @Model.Categories[i].Id })
                        @Html.HiddenFor(model => model.Categories[i].Id)
                        @Html.HiddenFor(model => model.Categories[i].Name)
                        @Html.HiddenFor(model => model.Categories[i].ParentId)
                        <label for=@i>
                            @Html.DisplayFor(model => model.Categories[i].Name)
                        </label>
                    </a>
                    <ul>
                        @for (var j = 0; j < Model.Categories.Count; j++)
                        {
                            if (!Model.Categories[j].HasParent || Model.Categories[j].ParentId != Model.Categories[i].Id)
                            {
                                continue;
                            }
                            @Html.HiddenFor(model => model.Categories[j].Id)
                            @Html.HiddenFor(model => model.Categories[j].Name)
                            @Html.HiddenFor(model => model.Categories[j].ParentId)
                            <li>
                                <a href="#">
                                    @Html.CheckBoxFor(model => model.Categories[j].IsActive, new { @class = "tree-checkbox node-item", @iid = i + "" + j })
                                    <label for=@i@j>
                                        @Html.DisplayFor(model => model.Categories[j].Name)
                                    </label>
                                </a>
                            </li>

                        }
                    </ul>
                </li>
            </ul>
        }
    </div>

    <div class="form-group">
        <div class="col-md-offset-2 col-md-10">
            <input type="submit" value="Create" class="btn btn-default" id="btnSubmit" onclick="saveRange()" />
        </div>
    </div>
</div>
}
@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}

